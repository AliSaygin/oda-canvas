@startuml

participant Canvas as "Canvas"
entity Component
participant "Component Operator" as ComponentOperator
entity "Secrets Management" as SecretsManagement
participant "Secrets Management Operator" as SecretsManagementOperator
participant ComponentImplementation [
	=Component POD
	----
	Component-Implementation
]
participant SecretsManagementSideCar [
	=Component POD
	----
	Secrets-Management-SideCar
]
participant CanvasVault as "Canvas Vault"

group Canvas Vault Initial Configuration 
    ...
	Canvas -> CanvasVault : setup Kubernetes Authenticator
	...
end group

== COMPONENT DEPLOYMENT ==

group Bootstrap - component deployment
	Component -> ComponentOperator : on.create
	ComponentOperator -> ComponentOperator : create unique Component-Instance-ID <CIID>
	create SecretsManagement
	ComponentOperator -> SecretsManagement  : extract config from Component
	SecretsManagement -> SecretsManagementOperator : on.create
	SecretsManagementOperator -> CanvasVault : Setup "role-<CIID>", which only accepts PODs from this Component-Instance 
	SecretsManagementOperator -> CanvasVault : Create empty Secret Store "secretsmanagement-<CIID>"
	SecretsManagementOperator -> CanvasVault : Grant "role-<CIID>" full permissions to "secretsmanagement-<CIID>"

== POD DEPLOYMENT ==

	 
	group Mutate PODs which request Secrets-Management-Access
		SecretsManagementOperator -> SecretsManagementSideCar : inject and configure SideCar with <CIID>, Canvas-Vault-URL, ... 
		ComponentImplementation <-[#ff0000]-> SecretsManagementSideCar
		activate ComponentImplementation 
		activate SecretsManagementSideCar 
	    note right of ComponentImplementation
	    started together in one POD
	    end note	
		SecretsManagementSideCar -> CanvasVault : authenticate as "role-<CIID>" (maybe periodic)
    end group

== POD RUNTIME ==

	group Initialization - one-time negotiation about a token securing the localhost communication 
		ComponentImplementation -> SecretsManagementSideCar : init(seed)
		skinparam responseMessageBelowArrow true
		ComponentImplementation <-- SecretsManagementSideCar : localhost-token
    end group
end group

note over ComponentImplementation : some time later


group Runtime - component running
	ComponentImplementation -> SecretsManagementSideCar : create secret(key, value)
	SecretsManagementSideCar -> CanvasVault : create secret("secretsmanagement-<CIID>", key, value)
	ComponentImplementation -> SecretsManagementSideCar : read secret(key)
	SecretsManagementSideCar -> CanvasVault : read secret("secretsmanagement-<CIID>", key)
	SecretsManagementSideCar  <-- CanvasVault : return secret-value
	ComponentImplementation <-- SecretsManagementSideCar : return secret-value 
end group

@enduml
