@startuml

actor Operations
entity "Component\nResource" as Component
participant "Component\nManagement\nOperator" as ComponentOperator
entity "Exposed\nAPI\nResource" as ExposedAPI
participant "API\nManagement\nOperator" as APIExposureOperator
entity "Published\nNotification\nResource" as PublishedNotification
participant "Event\nManagement\nOperator" as EventOperator
entity "Identity\nResource" as Identity
participant "Identity\nManagement\nOperator" as IdentityOperator
entity "Observability\nResource" as Observability
participant "Observability\nManagement\nOperator" as ObservabilityOperator
entity "Secrets\nResource" as Secrets
participant "Secrets\nManagement\nOperator" as SecretsOperator
entity "DependentAPI\nResource" as DependentAPI
participant "Dependency\nManagement\nOperator" as DependencyOperator


Component <- Operations : Install
Component -> ComponentOperator: on.update 
Component <- ComponentOperator: set status to **Configuring-APIs** 
ComponentOperator -> ComponentOperator: Determine what Exposed APIs have been added, updated or deleted
ComponentOperator -> ExposedAPI: create any added ExposedAPIs
ComponentOperator -> ExposedAPI: update any updated ExposedAPIs
ComponentOperator -> ExposedAPI: delete any deleted ExposedAPIs
note right
    A separate ExposedAPI resource is created, updated,
    or deleted for each exposed API in the core function,
    security and management sections
end note
group For each exposed API
    ExposedAPI -> APIExposureOperator: on.update  
    APIExposureOperator -> APIExposureOperator: Process API
    ExposedAPI <- APIExposureOperator: update
    ComponentOperator <- ExposedAPI: on.update
    Component <- ComponentOperator: update 
end
Component <- ComponentOperator: set status to **Configuring-Events** 
note right
    Once all APIs are configured successfully, change compoNEt status to Configuring-Events
end note
ComponentOperator -> ComponentOperator: Determine what Published Notifications have been added, updated or deleted
ComponentOperator -> PublishedNotification: create any added Published Notifications
ComponentOperator -> PublishedNotification: update any updated Published Notifications
ComponentOperator -> PublishedNotification: delete any deleted Published Notifications

ComponentOperator -> PublishedNotification: update
note right
    A separate PublishedNotification resource is updated
    for each Published Notification in the core function,
    security and management sections
end note
group For each Published Notification
    PublishedNotification -> EventOperator: on.update 
    EventOperator -> EventOperator: Process Notification
    PublishedNotification <- EventOperator: update
    ComponentOperator <- PublishedNotification: on.update
    Component <- ComponentOperator: update 
end
Component <- ComponentOperator: set status to **Configuring-IDM** 
note right
    Once all Events are configured successfully, change component status to Configuring-IDM
end note

ComponentOperator -> Identity: update
Identity -> IdentityOperator: on.update
IdentityOperator -> IdentityOperator: Manage roles and users
Identity <- IdentityOperator: update
ComponentOperator <- Identity: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Observability** 
ComponentOperator -> Observability: update
Observability -> ObservabilityOperator: on.update
ObservabilityOperator -> ObservabilityOperator: Configure Observability
Observability <- ObservabilityOperator: update
ComponentOperator <- Observability: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Secrets** 
ComponentOperator -> Secrets: update
Secrets -> SecretsOperator: on.update
SecretsOperator -> SecretsOperator: Configure secrets vault
Secrets <- SecretsOperator: update
ComponentOperator <- Secrets: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Dependencies** 

ComponentOperator -> ComponentOperator: Determine what Dependent APIs have been added, updated or deleted
ComponentOperator -> DependentAPI: create any added ExposedAPIs
ComponentOperator -> DependentAPI: update any updated ExposedAPIs
ComponentOperator -> DependentAPI: delete any deleted ExposedAPIs
note right
    A separate DependentAPI resource is created, updated,
    or deleted for each dependent API in the core function,
    security and management sections
end note
group For each dependent API
    DependentAPI -> DependencyOperator: on.update  
    DependencyOperator -> DependencyOperator: Process API
    DependentAPI <- DependencyOperator: update
    ComponentOperator <- DependentAPI: on.update
    Component <- ComponentOperator: update 
end

Component <- ComponentOperator: set status to **Complete** 
note right
    Once all Dependent APIs are configured successfully, change component status to Complete
end note
@enduml