@startuml

participant Canvas as "Canvas"
entity Component
participant "Component Operator" as ComponentOperator
participant "Kubernetes API" as KubernetesAPI
participant ComponentImplementation [
	=Component POD
	----
	Component-Implementation
]
participant SecretsManagementSideCar [
	=Component POD
	----
	Secrets-Management-SideCar
]
participant CanvasVault as "Canvas Vault"


group Canvas Vault Setup 
    ...
	Canvas -> CanvasVault : setup jwt endpoint for oidc_discovery with secrets/kubernetes.io/serviceaccount/ca.crt
	...
end group

group Bootstrap - component deployment
	Component -> ComponentOperator : on.create
	ComponentOperator -> ComponentOperator : create unique Component-Instance-ID <CIID>
	ComponentOperator -> KubernetesAPI : create ServiceAccount "sa-<CIID>"
	ComponentOperator -> CanvasVault : create Key-Value store "secretsmanagement-<CIID>"
	ComponentOperator -> CanvasVault : Setup JWT role for "sa-<CIID>" with full access to path "secretsmanagement-<CIID>"
	ComponentOperator -> SecretsManagementSideCar : create & inject SideCar container with JWT mount, Canvas-Vault-URL and <CIID>
	ComponentImplementation <-[#ff0000]-> SecretsManagementSideCar
	activate ComponentImplementation 
	activate SecretsManagementSideCar 
    note right of ComponentImplementation
    started together in one POD
    end note	
	SecretsManagementSideCar -> CanvasVault : login to "secretsmanagement-<CIID>" using JWT of "sa-<CIID>"
	group Optional - one-time negotiation about a token securing the localhost communication 
		ComponentImplementation -> SecretsManagementSideCar : init(seed)
		skinparam responseMessageBelowArrow true
		ComponentImplementation <-- SecretsManagementSideCar : localhost-token
    end group
end group

note over ComponentImplementation : some time later

group Runtime - component running
	ComponentImplementation -> SecretsManagementSideCar : create secret(key, value)
	SecretsManagementSideCar -> CanvasVault : create secret("secretsmanagement-<CIID>", key, value)
	ComponentImplementation -> SecretsManagementSideCar : read secret(key)
	SecretsManagementSideCar -> CanvasVault : read secret("secretsmanagement-<CID>", key)
	SecretsManagementSideCar  <-- CanvasVault : return secret-value
	ComponentImplementation <-- SecretsManagementSideCar : return secret-value 
end group

@enduml
