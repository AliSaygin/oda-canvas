@startuml

actor Operations
entity "Component\nResource" as Component
participant "Component\nLifecycle\nManagement\nOperator" as ComponentOperator
entity "Exposed\nAPI\nResource" as ExposedAPI
participant "API\nManagement\nOperator" as APIExposureOperator
entity "Published\nNotification\nResource" as PublishedNotification
participant "Event\nManagement\nOperator" as EventOperator
entity "Identity\nResource" as Identity
participant "Identity\nConfig\nOperator" as IdentityOperator
entity "Observability\nResource" as Observability
participant "Observability\nConfig\nOperator" as ObservabilityOperator
entity "Secrets\nResource" as Secrets
participant "Secrets\nManagement\nOperator" as SecretsOperator
entity "DependentAPI\nResource" as DependentAPI
participant "Dependency\nManagement\nOperator" as DependencyOperator


Component <- Operations : Install
Component -> ComponentOperator: on.create 
Component <- ComponentOperator: set status to **Configuring-APIs** 
ComponentOperator -> ExposedAPI: create
note right
    A separate ExposedAPI resource is created
    for each exposed API in the core function,
    security and management sections
end note
group For each exposed API
    ExposedAPI -> APIExposureOperator: on.create 
    APIExposureOperator -> APIExposureOperator: Process API
    ExposedAPI <- APIExposureOperator: update
    ComponentOperator <- ExposedAPI: on.update
    Component <- ComponentOperator: update 
end
Component <- ComponentOperator: set status to **Configuring-Events** 
note right
    Once all APIs are configured successfully, change compoNEt status to Configuring-Events
end note

ComponentOperator -> PublishedNotification: create
note right
    A separate PublishedNotification resource is created
    for each Published Notification in the core function,
    security and management sections
end note
group For each Published Notification
    PublishedNotification -> EventOperator: on.create 
    EventOperator -> EventOperator: Process Notification
    PublishedNotification <- EventOperator: update
    ComponentOperator <- PublishedNotification: on.update
    Component <- ComponentOperator: update 
end
Component <- ComponentOperator: set status to **Configuring-IDM** 
note right
    Once all Events are configured successfully, change component status to Configuring-IDM
end note

ComponentOperator -> Identity: create
Identity -> IdentityOperator: on.create
IdentityOperator -> IdentityOperator: Manage roles and users
Identity <- IdentityOperator: update
ComponentOperator <- Identity: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Observability** 
ComponentOperator -> Observability: create
Observability -> ObservabilityOperator: on.create
ObservabilityOperator -> ObservabilityOperator: Configure Observability
Observability <- ObservabilityOperator: update
ComponentOperator <- Observability: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Secrets** 
ComponentOperator -> Secrets: create
Secrets -> SecretsOperator: on.create
SecretsOperator -> SecretsOperator: Configure secrets vault
Secrets <- SecretsOperator: update
ComponentOperator <- Secrets: on.update
Component <- ComponentOperator: update 

Component <- ComponentOperator: set status to **Configuring-Dependencies** 
ComponentOperator -> DependentAPI: create
note right
    A separate DependentAPI resource is created
    for each dependent API in the core function,
    security and management sections
end note
group For each dependent API
    DependentAPI -> DependencyOperator: on.create
    DependencyOperator -> DependencyOperator: Configure dependencies
    DependentAPI <- DependencyOperator: update
    ComponentOperator <- DependentAPI: on.update
    Component <- ComponentOperator: update 
end
Component <- ComponentOperator: set status to **Configuring-Events** 
note right
    Once all dependent APIs are configured successfully, change component status to Complete
end note

Component <- ComponentOperator: set status to **Complete** 

@enduml